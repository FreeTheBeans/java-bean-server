name: Database Setup

on:
  workflow_call:
    inputs: 
      TERRAFORM_APPLY_BRANCH:
        type: string
        description: 'Terraform Apply Branch'
        required: true
      DB_INSTANCE_NAME:
        type: string
        description: 'DB Instance Name'
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.TERRAFORM_APPLY_BRANCH }}

      - name: Assume the deploy pipeline user role
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: ${{secrets.AWS_ASSUME_ROLE}}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: make tf_init

      - name: Terraform Validate
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: make tf_validate

      - name: Terraform Plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DB_USER: ${{secrets.DB_USERNAME}}
          DB_PW: ${{secrets.DB_PASSWORD}}
          DB_ID: ${{inputs.DB_INSTANCE_NAME}}
          DB_NAME: ${{vars.DB_NAME}}
          LIQUIBASE_S3_BUCKET_NAME: ${{vars.LIQUIBASE_S3_BUCKET_NAME}}
        run: make tf_plan

      - name: Terraform Apply
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DB_USER: ${{secrets.DB_USERNAME}}
          DB_PW: ${{secrets.DB_PASSWORD}}
          DB_ID: ${{inputs.DB_INSTANCE_NAME}}
          DB_NAME: ${{vars.DB_NAME}}
          LIQUIBASE_S3_BUCKET_NAME: ${{vars.LIQUIBASE_S3_BUCKET_NAME}}
        run: make tf_apply

  setup_database_env_file:
    name: Dev CI
    needs: terraform_apply
    uses: ./.github/workflows/_create-liquibase-remote-config.yml
    secrets: inherit
    with:
      DB_INSTANCE_NAME: ${{inputs.DB_INSTANCE_NAME}}

  database_setup:
    name: Check and Setup Database
    runs-on: ubuntu-latest
    needs: setup_database_env_file

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.TERRAFORM_APPLY_BRANCH }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install psql
        run: |
          sudo sh -c 'echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install postgresql

      - name: Retrieve Env File
        run: aws s3 cp ${{ vars.LIQUIBASE_S3_BUCKET_NAME }} .env

      - name: Create Dev and Prod Databases
        run: |
          export $(cat .env | xargs)
          export PGPASSWORD=$DB_PASSWORD
          psql "postgresql://$DB_USERNAME@$DB_URL/postgres" -tc "SELECT 1 FROM pg_database WHERE datname = 'dev'" | grep -q 1 || psql "postgresql://$DB_USERNAME@$DB_URL/postgres" -c "CREATE DATABASE dev"
          psql "postgresql://$DB_USERNAME@$DB_URL/postgres" -tc "SELECT 1 FROM pg_database WHERE datname = '${{vars.DB_NAME}}'" | grep -q 1 || psql "postgresql://$DB_USERNAME@$DB_URL/postgres" -c "CREATE DATABASE ${{vars.DB_NAME}}"