name: Development Database CI/CD

on:
  push:
    branches: [ dev ]

permissions:
  contents: read
  id-token: write

jobs:
  ci-workflow:
    name: Dev CI
    uses: ./.github/workflows/dev-db-ci.yml
    secrets: inherit

  database_setup_workflow: 
      name: Database Setup for Testing
      needs: ci-workflow
      uses: ./.github/workflows/_database_setup.yml
      with:
        TERRAFORM_APPLY_BRANCH: dev
        DB_INSTANCE_NAME: ${{vars.DB_INSTANCE_NAME}}
      secrets: inherit

  test_prod_db:
      name: Test Dev Replica DB Migration
      needs: database_setup_workflow
      runs-on: ubuntu-latest
      environment: Testing
  
      services:
        postgres:
          image: postgres:16.1
          env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: pass123
            POSTGRES_DB: dev_temp
            POSTGRES_PORT: 5432
          ports:
            - 5432:5432
  
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
  
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
            aws-region: ${{ secrets.AWS_REGION }}
  
        - name: Install psql
          run: |
            sudo apt install wget ca-certificates
            sudo sh -c 'echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            sudo apt-get update
            sudo apt-get -y install postgresql
            sudo ln -s /usr/lib/postgresql/16/bin/pg_dump /usr/bin/pg_dump --force
        
        - name: Install Liquibase
          run: |
            curl -L https://github.com/liquibase/liquibase/releases/download/v${LB_VERSION}/liquibase-${LB_VERSION}.zip --output liquibase.zip
            unzip -o -d liquibase liquibase.zip
          env:
            LB_VERSION: ${{ vars.LIQUIBASE_VERSION }}
  
        - name: Retrieve Env File
          run: aws s3 cp s3://${{ vars.LIQUIBASE_S3_BUCKET_NAME }}/.env .env
  
        - name: Create Test Database
          run: |
            export $(cat .env | xargs)
            export PGPASSWORD=$DB_PASSWORD
            pg_dump "postgresql://$DB_USERNAME@$DB_URL/dev" > dump.sql
            export PGPASSWORD="pass123"
            psql "postgresql://postgres@localhost:5432/dev_temp" -f dump.sql
            
        - name: Create Liquibase Properties
          run: |
            export $(cat .env | xargs)
            echo "changelog-file:" $CHANGELOG_FILE >> liquibase.properties
            echo "url: jdbc:postgresql://localhost:5432/dev_temp" >> liquibase.properties
            echo "username: postgres" >> liquibase.properties
            echo "password: pass123" >> liquibase.properties
  
        - name: Test Migration and Rollback
          run: ./liquibase/liquibase update-testing-rollback --rollback-on-error=true


  migrate_dev_db:
    name: Migrate Dev DB
    needs: ci-workflow
    runs-on: ubuntu-latest
    environment: Development

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Liquibase
        run: |
          curl -L https://github.com/liquibase/liquibase/releases/download/v${LB_VERSION}/liquibase-${LB_VERSION}.zip --output liquibase.zip
          unzip -o -d liquibase liquibase.zip
        env:
          LB_VERSION: ${{ vars.LIQUIBASE_VERSION }}

      - name: Retrieve Env File
        run: aws s3 cp s3://${{ vars.LIQUIBASE_S3_BUCKET_NAME }}/.env .env

      - name: Create Liquibase Properties
        run: |
          export $(cat .env | xargs)
          echo "changelog-file:" $CHANGELOG_FILE >> liquibase.properties
          echo "url: jdbc:postgresql://${DB_URL}/dev" >> liquibase.properties
          echo "username:" $DB_USERNAME >> liquibase.properties
          echo "password:" $DB_PASSWORD >> liquibase.properties

      - name: Migrate Database to RDS
        run: ./liquibase/liquibase update --rollback-on-error=true

  deploy_bean_server:
     needs: database_setup_workflow
     name: Deploy Bean Server
     uses: ./.github/workflows/_deploy_bean_server.yml
     secrets: inherit

  Integration_test:
    needs: deploy_bean_server
    name: Integration tests
    uses: ./.github/workflows/_integration_postman_tests.yml
    secrets: inherit